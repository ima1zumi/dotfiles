# --*--*--
# Vim
# --*--*--
[[plugins]] # ヘルプの日本語化
repo = 'vim-jp/vimdoc-ja'

# --*--*--
# 見た目
# --*--*--
[[plugins]] # カラースキーマ
repo = 'cocopon/iceberg.vim'

[[plugins]] # カラースキーマ
repo = 'EdenEast/nightfox.nvim'

[[plugins]] # カラースキーマ
repo = 'ghifarit53/tokyonight-vim'

[[plugins]] # ステータスバー
repo = 'nvim-lualine/lualine.nvim'

[[plugins]] # インデントを表示
repo = 'lukas-reineke/indent-blankline.nvim'

[[plugins]] # 選択した文字をハイライト
repo = 't9md/vim-quickhl'

[[plugins]] # 行末の空白を可視化
repo = 'ntpeters/vim-better-whitespace'

[[plugins]] # Ansi Escape を色付きで表示
repo = 'powerman/vim-plugin-AnsiEsc'

# --*--*--
# シンタックスハイライト
# --*--*--

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-context'

[[plugins]]
repo = 'slim-template/vim-slim'

[[plugins]]
repo = 'pocke/rbs.vim'

# --*--*--
# Vim拡張
# --*--*--
[[plugins]] # undoを辿れるようにする
repo = 'mbbill/undotree'

[[plugins]] # buffer 同士の比較を簡単にする
repo = 'deris/vim-diffbuf'

[[plugins]] # 行番号を指定してファイルを開く
repo = 'bogado/file-line'

[[plugins]] # QuickFixで置換
repo = 'thinca/vim-qfreplace'

# --*--*--
# 入力補助
# --*--*--
[[plugins]] # operator-replace の依存プラグイン
repo = 'kana/vim-operator-user'

[[plugins]] # オペレータ拡張
repo = 'kana/vim-operator-replace'

[[plugins]] # vim-textobj-ruby の依存プラグイン
repo = 'kana/vim-textobj-user'

[[plugins]] # rubyのtextobjを扱う
repo = 'rhysd/vim-textobj-ruby'

[[plugins]] # `sil`
repo = 'kana/vim-textobj-line'

[[plugins]] # end に対応するやつをハイライト
repo = 'andymass/vim-matchup'

[[plugins]] # operator 実行時にカーソルを移動させない
repo = 'osyo-manga/vim-operator-stay-cursor'

[[plugins]] # text object の囲み文字
repo = 'rhysd/vim-operator-surround'

[[plugins]] # コメント
repo = 'numToStr/Comment.nvim'

[[plugins]] # endwise
repo = 'RRethy/nvim-treesitter-endwise'

[[plugins]] # editorconfig
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'github/copilot.vim'

# --*--*--
# ファイラ
# --*--*--
[[plugins]] # 対話的なインターフェースを提供
# Vim では pip3 install --user pynvim が必要
repo = 'Shougo/denite.nvim'

[[plugins]] # ファイラ
repo = 'Shougo/defx.nvim'

[[plugins]] # defxにgit差分を表示
repo = 'kristijanhusak/defx-git'

[[plugins]] # defxアイコン
repo = 'ryanoasis/vim-devicons'

[[plugins]] # defxアイコン
repo = 'kristijanhusak/defx-icons'

# --*--*--
# 検索
# --*--*--
# Need fzf, bat, ripgrep
[[plugins]]
repo = 'junegunn/fzf'

[[plugins]]
repo = 'junegunn/fzf.vim'
build = 'fzf#install()'

[[plugins]] # アスタリスクで単語下を検索
repo = 'haya14busa/vim-asterisk'

[[plugins]] # リファレンスをみるためのツール
repo = 'thinca/vim-ref'

# --*--*--
# QuickRun
# --*--*--
[[plugins]] # quickrun
repo = 'thinca/vim-quickrun'

[[plugins]] # QuickRun setting
repo = 'osyo-manga/denite-quickrun_config'

[[plugins]] # quickrun job
repo = 'lambdalisue/vim-quickrun-neovim-job'

[[plugins]] # QuickRunの設定共通
repo = 'osyo-manga/shabadou.vim'

# --*--*--
# LSP
# --*--*--
[[plugins]] # LSP
repo = 'neoclide/coc.nvim'
rev = 'release'
merged = 0

# --*--*--
# SQL
# --*--*--
[[plugins]] # sqlUtilities
repo = 'vim-scripts/Align'

[[plugins]] # sql
repo = 'vim-scripts/SQLUtilities'

# --*--*--
# Git
# --*--*--
[[plugins]] # git で差分がある行を表示
repo = 'airblade/vim-gitgutter'

[[plugins]] # conflictをハイライト表示
repo = 'rhysd/conflict-marker.vim'

[[plugins]] # git
repo = 'lambdalisue/gina.vim'

# --*--*--
# esa
# --*--*--
[[plugins]] # esa.vim が依存している
repo = 'mattn/webapi-vim'

[[plugins]] # esa への投稿
repo = 'upamune/esa.vim'

# --*--*--
# Browser
# --*--*--
[[plugins]] # rurema等の依存プラグイン
repo = 'tyru/open-browser.vim'

# --*--*--
# CSV
# --*--*--
[[plugins]] # CSV を便利に扱う
repo = 'chrisbra/csv.vim'

# --*--*--
# Testing
# --*--*--
# https://reona.dev/posts/20210629

[[plugins]]
repo = 'tpope/vim-dispatch'
on_ft = ['ruby']

[[plugins]]
repo = 'vim-test/vim-test'
depends = ['vim-dispatch']
on_ft = ['ruby']
hook_add = '''
  function! DockerTransformer(cmd) abort
    let container_name = system(
  - docker-compose ps | grep 3000 | awk '{print $1}')
    if matchstr(container_name,
  - _app_) ==
  - _app_
      return 'docker-compose exec app ' . a:cmd
    elseif matchstr(container_name,
  - _web_) ==
  - _web_
      return 'docker-compose exec web ' . a:cmd
    else
      return a:cmd
    endif
  endfunction

  let g:test#custom_transformations = {'docker': function('DockerTransformer')}
  let g:test#transformation = 'docker'
  let g:test#strategy = 'dispatch'

  nnoremap <Leader>tn :TestNearest<cr>
  nnoremap <Leader>tf :TestFile<cr>
'''
